// This code block defines the generator configuration for the Prisma client.
// The generator is set to "prisma-client-js" which generates a JavaScript client for interacting with the Prisma database.

// prisma next auth docs
// https://authjs.dev/reference/adapter/prisma

// steps to update db: 
// 1. npx prisma generate
// 2. npx prisma migrate reset
// 3. npx prisma db push

// steps to reset db:
// 1. npx prisma migrate reset

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

// user Table
// the reason password is optional is
// because if we use OAuth, we won't need a password
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  profileImage       String?
  password           String?
  role               UserRole  @default(USER) // default role would be USER
  isTwoFactorEnabled Boolean   @default(false)
  
  accounts Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) // adds one unique token per email
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
